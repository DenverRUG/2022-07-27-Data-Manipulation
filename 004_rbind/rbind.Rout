
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # The three data sets
> #                                             Rows  Columms
> # ./000_data_sets/recs2009_public.csv       12,083      940
> # ./000_data_sets/recs2015_public_v4.csv     5,686      759
> # ./000_data_sets/recs2020_public_v1.csv    18,496      601
> 
> source("utilities.R")
> 
> recs_2009_df <- read.csv(recs_2009_path, colClasses = "character")
> recs_2015_df <- read.csv(recs_2015_path, colClasses = "character")
> recs_2020_df <- read.csv(recs_2020_path, colClasses = "character")
> 
> recs_2009_tbl <- read_csv(recs_2009_path, col_types = cols(.default = "character"))
> recs_2015_tbl <- read_csv(recs_2015_path, col_types = cols(.default = "character"))
> recs_2020_tbl <- read_csv(recs_2020_path, col_types = cols(.default = "character"))
> 
> recs_2009_dt <- fread(recs_2009_path, colClasses = "character")
> recs_2015_dt <- fread(recs_2015_path, colClasses = "character")
> recs_2020_dt <- fread(recs_2020_path, colClasses = "character")
> 
> 
> ################################################################################
> # stack a data frame ontop of itself
> calls <-
+   alist(
+     base_09 = rbind(recs_2009_df, recs_2009_df),
+     base_15 = rbind(recs_2015_df, recs_2015_df),
+     base_20 = rbind(recs_2020_df, recs_2020_df),
+     tidy_09 = bind_rows(recs_2009_tbl, recs_2009_tbl),
+     tidy_15 = bind_rows(recs_2015_tbl, recs_2015_tbl),
+     tidy_20 = bind_rows(recs_2020_tbl, recs_2020_tbl),
+     dt_09   = rbind(recs_2009_dt, recs_2009_dt),
+     dt_15   = rbind(recs_2015_dt, recs_2015_dt),
+     dt_20   = rbind(recs_2020_dt, recs_2020_dt)
+   )
> 
> benchmark(calls[c(1, 4, 7)])
$benchmark
Unit: milliseconds
    expr      min       lq     mean   median       uq       max neval
 base_09 337.2123 362.4760 485.5855 495.4274 515.1239 1152.0775   100
 tidy_09 299.2168 308.9083 380.1159 336.9590 456.6106  604.3926   100
   dt_09 167.3748 172.8888 278.1251 191.1840 329.7321  966.9046   100

$profmem
              bytes
base_09 282,216,864
tidy_09 182,821,944
dt_09   181,854,280

> benchmark(calls[c(1, 4, 7) + 1])
$benchmark
Unit: milliseconds
    expr      min       lq     mean   median       uq      max neval
 base_15 192.4871 203.3906 258.4488 208.0563 338.4961 861.8258   100
 tidy_15 174.2205 178.5254 198.0289 182.6111 188.6399 338.8163   100
   dt_15 102.1657 105.1909 124.2126 107.4949 111.0144 283.0303   100

$profmem
              bytes
base_15 107,326,256
tidy_15  69,930,736
dt_15    69,155,768

> benchmark(calls[c(1, 4, 7) + 2])
$benchmark
Unit: milliseconds
    expr      min       lq     mean   median       uq       max neval
 base_20 390.4997 428.9971 546.2449 556.9240 588.0273 1297.5062   100
 tidy_20 343.2958 353.2237 453.8751 385.5921 518.5279 1090.5001   100
   dt_20 197.1138 207.1886 284.2417 224.4680 362.6766  929.0132   100

$profmem
              bytes
base_20 276,362,752
tidy_20 178,558,000
dt_20   177,944,192

> 
> ################################################################################
> # stack up a unknown number of data.frames
> 
> dfs  <- split(recs_2020_df,  f = recs_2020_df$IECC_climate_code)
> tbls <- split(recs_2020_tbl, f = recs_2020_tbl$IECC_climate_code)
> dts  <- split(recs_2020_dt,  f = recs_2020_dt$IECC_climate_code)
> 
> calls <- alist(
+                base = do.call(rbind, dfs),
+                tidy = bind_rows(tbls),
+                dt   = rbindlist(dts)
+                )
> 
> benchmark(calls)
$benchmark
Unit: milliseconds
 expr      min        lq      mean    median        uq       max neval
 base 852.7541 1045.9851 1130.7552 1063.3896 1183.4326 2056.3738   100
 tidy 179.5951  190.2995  238.7537  193.7249  337.5707  483.8519   100
   dt 121.0536  126.7688  159.0514  130.7025  134.6155  343.3928   100

$profmem
           bytes
base 544,692,048
tidy  89,282,120
dt    89,053,888

> 
> ################################################################################
> # Stack data.frames with different column names and orders
> mtcar_sets <-
+   list(
+        mtcars1 = mtcars[c("mpg", "wt", "hp")],
+        mtcars2 = mtcars[c("wt", "disp")],
+        mtcars3 = mtcars[c("hp", "disp", "mpg")]
+ )
> 
> with(mtcar_sets, tryCatch(rbind(mtcars1, mtcars2), error = function(e) {e}))
<simpleError in rbind(deparse.level, ...): numbers of columns of arguments do not match>
> with(mtcar_sets, tryCatch(rbind(mtcars1, mtcars3), error = function(e) {e}))
<simpleError in match.names(clabs, names(xi)): names do not match previous names>
> 
> # How to do this in base R????  I don't know of a easy tool in base R.  All
> # alternatives are in other packages such as gtools::smartbind
> 
> calls <- alist(
+   tidy = bind_rows(mtcar_sets, .id = "set"),
+   dt   = data.table::rbindlist(mtcar_sets, use.names = TRUE, fill = TRUE, idcol = "set")
+   )
> 
> lapply(calls, eval)
$tidy
                             set  mpg    wt  hp  disp
Mazda RX4...1            mtcars1 21.0 2.620 110    NA
Mazda RX4 Wag...2        mtcars1 21.0 2.875 110    NA
Datsun 710...3           mtcars1 22.8 2.320  93    NA
Hornet 4 Drive...4       mtcars1 21.4 3.215 110    NA
Hornet Sportabout...5    mtcars1 18.7 3.440 175    NA
Valiant...6              mtcars1 18.1 3.460 105    NA
Duster 360...7           mtcars1 14.3 3.570 245    NA
Merc 240D...8            mtcars1 24.4 3.190  62    NA
Merc 230...9             mtcars1 22.8 3.150  95    NA
Merc 280...10            mtcars1 19.2 3.440 123    NA
Merc 280C...11           mtcars1 17.8 3.440 123    NA
Merc 450SE...12          mtcars1 16.4 4.070 180    NA
Merc 450SL...13          mtcars1 17.3 3.730 180    NA
Merc 450SLC...14         mtcars1 15.2 3.780 180    NA
Cadillac Fleetwood...15  mtcars1 10.4 5.250 205    NA
Lincoln Continental...16 mtcars1 10.4 5.424 215    NA
Chrysler Imperial...17   mtcars1 14.7 5.345 230    NA
Fiat 128...18            mtcars1 32.4 2.200  66    NA
Honda Civic...19         mtcars1 30.4 1.615  52    NA
Toyota Corolla...20      mtcars1 33.9 1.835  65    NA
Toyota Corona...21       mtcars1 21.5 2.465  97    NA
Dodge Challenger...22    mtcars1 15.5 3.520 150    NA
AMC Javelin...23         mtcars1 15.2 3.435 150    NA
Camaro Z28...24          mtcars1 13.3 3.840 245    NA
Pontiac Firebird...25    mtcars1 19.2 3.845 175    NA
Fiat X1-9...26           mtcars1 27.3 1.935  66    NA
Porsche 914-2...27       mtcars1 26.0 2.140  91    NA
Lotus Europa...28        mtcars1 30.4 1.513 113    NA
Ford Pantera L...29      mtcars1 15.8 3.170 264    NA
Ferrari Dino...30        mtcars1 19.7 2.770 175    NA
Maserati Bora...31       mtcars1 15.0 3.570 335    NA
Volvo 142E...32          mtcars1 21.4 2.780 109    NA
Mazda RX4...33           mtcars2   NA 2.620  NA 160.0
Mazda RX4 Wag...34       mtcars2   NA 2.875  NA 160.0
Datsun 710...35          mtcars2   NA 2.320  NA 108.0
Hornet 4 Drive...36      mtcars2   NA 3.215  NA 258.0
Hornet Sportabout...37   mtcars2   NA 3.440  NA 360.0
Valiant...38             mtcars2   NA 3.460  NA 225.0
Duster 360...39          mtcars2   NA 3.570  NA 360.0
Merc 240D...40           mtcars2   NA 3.190  NA 146.7
Merc 230...41            mtcars2   NA 3.150  NA 140.8
Merc 280...42            mtcars2   NA 3.440  NA 167.6
Merc 280C...43           mtcars2   NA 3.440  NA 167.6
Merc 450SE...44          mtcars2   NA 4.070  NA 275.8
Merc 450SL...45          mtcars2   NA 3.730  NA 275.8
Merc 450SLC...46         mtcars2   NA 3.780  NA 275.8
Cadillac Fleetwood...47  mtcars2   NA 5.250  NA 472.0
Lincoln Continental...48 mtcars2   NA 5.424  NA 460.0
Chrysler Imperial...49   mtcars2   NA 5.345  NA 440.0
Fiat 128...50            mtcars2   NA 2.200  NA  78.7
Honda Civic...51         mtcars2   NA 1.615  NA  75.7
Toyota Corolla...52      mtcars2   NA 1.835  NA  71.1
Toyota Corona...53       mtcars2   NA 2.465  NA 120.1
Dodge Challenger...54    mtcars2   NA 3.520  NA 318.0
AMC Javelin...55         mtcars2   NA 3.435  NA 304.0
Camaro Z28...56          mtcars2   NA 3.840  NA 350.0
Pontiac Firebird...57    mtcars2   NA 3.845  NA 400.0
Fiat X1-9...58           mtcars2   NA 1.935  NA  79.0
Porsche 914-2...59       mtcars2   NA 2.140  NA 120.3
Lotus Europa...60        mtcars2   NA 1.513  NA  95.1
Ford Pantera L...61      mtcars2   NA 3.170  NA 351.0
Ferrari Dino...62        mtcars2   NA 2.770  NA 145.0
Maserati Bora...63       mtcars2   NA 3.570  NA 301.0
Volvo 142E...64          mtcars2   NA 2.780  NA 121.0
Mazda RX4...65           mtcars3 21.0    NA 110 160.0
Mazda RX4 Wag...66       mtcars3 21.0    NA 110 160.0
Datsun 710...67          mtcars3 22.8    NA  93 108.0
Hornet 4 Drive...68      mtcars3 21.4    NA 110 258.0
Hornet Sportabout...69   mtcars3 18.7    NA 175 360.0
Valiant...70             mtcars3 18.1    NA 105 225.0
Duster 360...71          mtcars3 14.3    NA 245 360.0
Merc 240D...72           mtcars3 24.4    NA  62 146.7
Merc 230...73            mtcars3 22.8    NA  95 140.8
Merc 280...74            mtcars3 19.2    NA 123 167.6
Merc 280C...75           mtcars3 17.8    NA 123 167.6
Merc 450SE...76          mtcars3 16.4    NA 180 275.8
Merc 450SL...77          mtcars3 17.3    NA 180 275.8
Merc 450SLC...78         mtcars3 15.2    NA 180 275.8
Cadillac Fleetwood...79  mtcars3 10.4    NA 205 472.0
Lincoln Continental...80 mtcars3 10.4    NA 215 460.0
Chrysler Imperial...81   mtcars3 14.7    NA 230 440.0
Fiat 128...82            mtcars3 32.4    NA  66  78.7
Honda Civic...83         mtcars3 30.4    NA  52  75.7
Toyota Corolla...84      mtcars3 33.9    NA  65  71.1
Toyota Corona...85       mtcars3 21.5    NA  97 120.1
Dodge Challenger...86    mtcars3 15.5    NA 150 318.0
AMC Javelin...87         mtcars3 15.2    NA 150 304.0
Camaro Z28...88          mtcars3 13.3    NA 245 350.0
Pontiac Firebird...89    mtcars3 19.2    NA 175 400.0
Fiat X1-9...90           mtcars3 27.3    NA  66  79.0
Porsche 914-2...91       mtcars3 26.0    NA  91 120.3
Lotus Europa...92        mtcars3 30.4    NA 113  95.1
Ford Pantera L...93      mtcars3 15.8    NA 264 351.0
Ferrari Dino...94        mtcars3 19.7    NA 175 145.0
Maserati Bora...95       mtcars3 15.0    NA 335 301.0
Volvo 142E...96          mtcars3 21.4    NA 109 121.0

$dt
        set   mpg    wt    hp  disp
     <char> <num> <num> <num> <num>
 1: mtcars1  21.0 2.620   110    NA
 2: mtcars1  21.0 2.875   110    NA
 3: mtcars1  22.8 2.320    93    NA
 4: mtcars1  21.4 3.215   110    NA
 5: mtcars1  18.7 3.440   175    NA
 6: mtcars1  18.1 3.460   105    NA
 7: mtcars1  14.3 3.570   245    NA
 8: mtcars1  24.4 3.190    62    NA
 9: mtcars1  22.8 3.150    95    NA
10: mtcars1  19.2 3.440   123    NA
11: mtcars1  17.8 3.440   123    NA
12: mtcars1  16.4 4.070   180    NA
13: mtcars1  17.3 3.730   180    NA
14: mtcars1  15.2 3.780   180    NA
15: mtcars1  10.4 5.250   205    NA
16: mtcars1  10.4 5.424   215    NA
17: mtcars1  14.7 5.345   230    NA
18: mtcars1  32.4 2.200    66    NA
19: mtcars1  30.4 1.615    52    NA
20: mtcars1  33.9 1.835    65    NA
21: mtcars1  21.5 2.465    97    NA
22: mtcars1  15.5 3.520   150    NA
23: mtcars1  15.2 3.435   150    NA
24: mtcars1  13.3 3.840   245    NA
25: mtcars1  19.2 3.845   175    NA
26: mtcars1  27.3 1.935    66    NA
27: mtcars1  26.0 2.140    91    NA
28: mtcars1  30.4 1.513   113    NA
29: mtcars1  15.8 3.170   264    NA
30: mtcars1  19.7 2.770   175    NA
31: mtcars1  15.0 3.570   335    NA
32: mtcars1  21.4 2.780   109    NA
33: mtcars2    NA 2.620    NA 160.0
34: mtcars2    NA 2.875    NA 160.0
35: mtcars2    NA 2.320    NA 108.0
36: mtcars2    NA 3.215    NA 258.0
37: mtcars2    NA 3.440    NA 360.0
38: mtcars2    NA 3.460    NA 225.0
39: mtcars2    NA 3.570    NA 360.0
40: mtcars2    NA 3.190    NA 146.7
41: mtcars2    NA 3.150    NA 140.8
42: mtcars2    NA 3.440    NA 167.6
43: mtcars2    NA 3.440    NA 167.6
44: mtcars2    NA 4.070    NA 275.8
45: mtcars2    NA 3.730    NA 275.8
46: mtcars2    NA 3.780    NA 275.8
47: mtcars2    NA 5.250    NA 472.0
48: mtcars2    NA 5.424    NA 460.0
49: mtcars2    NA 5.345    NA 440.0
50: mtcars2    NA 2.200    NA  78.7
51: mtcars2    NA 1.615    NA  75.7
52: mtcars2    NA 1.835    NA  71.1
53: mtcars2    NA 2.465    NA 120.1
54: mtcars2    NA 3.520    NA 318.0
55: mtcars2    NA 3.435    NA 304.0
56: mtcars2    NA 3.840    NA 350.0
57: mtcars2    NA 3.845    NA 400.0
58: mtcars2    NA 1.935    NA  79.0
59: mtcars2    NA 2.140    NA 120.3
60: mtcars2    NA 1.513    NA  95.1
61: mtcars2    NA 3.170    NA 351.0
62: mtcars2    NA 2.770    NA 145.0
63: mtcars2    NA 3.570    NA 301.0
64: mtcars2    NA 2.780    NA 121.0
65: mtcars3  21.0    NA   110 160.0
66: mtcars3  21.0    NA   110 160.0
67: mtcars3  22.8    NA    93 108.0
68: mtcars3  21.4    NA   110 258.0
69: mtcars3  18.7    NA   175 360.0
70: mtcars3  18.1    NA   105 225.0
71: mtcars3  14.3    NA   245 360.0
72: mtcars3  24.4    NA    62 146.7
73: mtcars3  22.8    NA    95 140.8
74: mtcars3  19.2    NA   123 167.6
75: mtcars3  17.8    NA   123 167.6
76: mtcars3  16.4    NA   180 275.8
77: mtcars3  17.3    NA   180 275.8
78: mtcars3  15.2    NA   180 275.8
79: mtcars3  10.4    NA   205 472.0
80: mtcars3  10.4    NA   215 460.0
81: mtcars3  14.7    NA   230 440.0
82: mtcars3  32.4    NA    66  78.7
83: mtcars3  30.4    NA    52  75.7
84: mtcars3  33.9    NA    65  71.1
85: mtcars3  21.5    NA    97 120.1
86: mtcars3  15.5    NA   150 318.0
87: mtcars3  15.2    NA   150 304.0
88: mtcars3  13.3    NA   245 350.0
89: mtcars3  19.2    NA   175 400.0
90: mtcars3  27.3    NA    66  79.0
91: mtcars3  26.0    NA    91 120.3
92: mtcars3  30.4    NA   113  95.1
93: mtcars3  15.8    NA   264 351.0
94: mtcars3  19.7    NA   175 145.0
95: mtcars3  15.0    NA   335 301.0
96: mtcars3  21.4    NA   109 121.0
        set   mpg    wt    hp  disp

> 
> benchmark(calls)
$benchmark
Unit: microseconds
 expr     min       lq     mean  median       uq     max neval
 tidy 231.412 255.5255 279.1642 278.773 297.9925 456.313   100
   dt 103.828 126.2310 138.7325 135.222 152.4415 211.524   100

$profmem
      bytes
tidy 12,336
dt   20,640

> 
> # with a lot of data
> calls <- alist(
+   tidy = bind_rows(list(recs_2009_tbl, recs_2015_tbl, recs_2020_tbl), .id = "set"),
+   dt   = data.table::rbindlist(list(recs_2009_dt, recs_2015_dt, recs_2020_dt), use.names = TRUE, fill = TRUE, idcol = "set")
+   )
> 
> benchmark(calls)
$benchmark
Unit: milliseconds
 expr      min        lq     mean    median        uq      max neval
 tidy 980.3540 1763.2402 1997.260 2179.1285 2306.1226 2551.646   100
   dt 440.6758  480.5171  706.392  647.5478  756.8493 1636.631   100

$profmem
           bytes
tidy 692,738,448
dt   451,485,288

> 
> 
> proc.time()
   user  system elapsed 
665.811  91.275 758.160 
