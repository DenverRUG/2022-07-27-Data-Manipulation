
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("utilities.R")
> 
> # read in the data
> psps_2019_base <- read.csv(psps_2019_path, colClasses = psps_column_classes)
> psps_2019_tidy <- read_csv(psps_2019_path, col_type = psps_column_classes)
> psps_2019_dt   <- fread(psps_2019_path,    colClasses = psps_column_classes)
> 
> # read in all the place of services
> pos_df <- read.csv("000_data_sets/cms_place_of_service.cvs"
+                    , col.names = c("code", "name", "description")
+                    , colClasses = c("integer", "character", "character"))
> pos_tbl <- read_csv("000_data_sets/cms_place_of_service.cvs"
+                     , col_names = c("code", "name", "description")
+                     , col_types = list("integer", "character", "character"))
Warning message:
One or more parsing issues, see `problems()` for details 
> pos_dt  <- fread("000_data_sets/cms_place_of_service.cvs"
+                  , col.names = c("code", "name", "description")
+                  , colClasses = c("integer", "character", "character"))
> 
> str(pos_dt)
Classes ‘data.table’ and 'data.frame':	99 obs. of  3 variables:
 $ code       : int  1 2 3 4 5 6 7 8 9 10 ...
 $ name       : chr  "Pharmacy" "Telehealth" "School" "Homeless Shelter" ...
 $ description: chr  "A facility or location where drugs and other medically related items and services are sold, dispensed, or other"| __truncated__ "The location where health services and health related services are provided or received, through a telecommunic"| __truncated__ "A facility whose primary purpose is education. (Effective January 1, 2003)" "" ...
 - attr(*, ".internal.selfref")=<externalptr> 
> 
> ################################################################################
> # set key for the data.table
> 
> data.table::setkey(pos_dt, "code")
> data.table::setkey(psps_2019_dt, "PLACE_OF_SERVICE_CD")
> 
> ################################################################################
> # I want the example here to include a nested ifelse statement.  However, I do
> # not want to write it explicitly because it is just too long.  So, here is some
> # R code to generate the needed R code.  This code is evaluated and then copied
> # into the examples below.
> 
> # start with the last entry in the mapping data.frame
> i <- nrow(pos_df)
> nested_ifelse <-
+   substitute(ifelse(PLACE_OF_SERVICE_CD == code, nm, x),
+              list(code = pos_df$code[i], nm = pos_df$name[i], x = NA_character_)
+              )
> 
> # build the rest of the nested_ifelse
> for(i in rev(seq.int(nrow(pos_df) - 1L))) {
+   nested_ifelse <-
+     substitute(ifelse(PLACE_OF_SERVICE_CD == code, nm, x),
+                list(code = pos_df$code[i], nm = pos_df$name[i], x = nested_ifelse))
+ }
> 
> # transition what happens when we try to evaluate this?
> psps_2019_base[1:6, "PLACE_OF_SERVICE_CD"]
[1] 22 12 24 24 11 31
> with(psps_2019_base[1:6, ], eval(nested_ifelse))
[1] "On Campus-Outpatient Hospital" "Home"                         
[3] "Ambulatory Surgical Center"    "Ambulatory Surgical Center"   
[5] "Office"                        "Skilled Nursing Facility"     
> tryCatch(with(psps_2019_base, eval(nested_ifelse)), error = function(e) {e})
<simpleError: vector memory exhausted (limit reached?)>
> 
> # what about case_when in dplyr
> e <- paste("case_when(",
+            paste(paste0("PLACE_OF_SERVICE_CD == ", pos_df$code, " ~ '", pos_df$name, "'"), collapse = ", ")
+            , ")")
> e <- parse(text = e)
> 
> x <- try(psps_2019_tidy %>% mutate(pos = eval(e)), silent = TRUE)
> str(x)
 'try-error' chr "Error in mutate(., pos = eval(e)) : \n  Problem while computing `pos = eval(e)`.\nCaused by error:\n! vector me"| __truncated__
 - attr(*, "condition")=List of 6
  ..$ message       : chr "Problem while computing `pos = eval(e)`."
  ..$ trace         :Classes ‘rlang_trace’, ‘rlib_trace’, ‘tbl’ and 'data.frame':	18 obs. of  6 variables:
  .. ..$ call       :List of 18
  .. .. ..$ : language try(psps_2019_tidy %>% mutate(pos = eval(e)), silent = TRUE)
  .. .. ..$ : language tryCatch(expr, error = function(e) {     call <- conditionCall(e) ...
  .. .. ..$ : language tryCatchList(expr, classes, parentenv, handlers)
  .. .. ..$ : language tryCatchOne(expr, names, parentenv, handlers[[1L]])
  .. .. ..$ : language doTryCatch(return(expr), name, parentenv, handler)
  .. .. ..$ : language psps_2019_tidy %>% mutate(pos = eval(e))
  .. .. ..$ : language mutate(., pos = eval(e))
  .. .. ..$ : language mutate.data.frame(., pos = eval(e))
  .. .. ..$ : language mutate_cols(.data, dplyr_quosures(...), caller_env = caller_env())
  .. .. ..$ : language withCallingHandlers({     for (i in seq_along(dots)) { ...
  .. .. ..$ : language mask$eval_all_mutate(quo)
  .. .. ..$ : language eval(e)
  .. .. ..$ : language eval(e)
  .. .. ..$ : language case_when(PLACE_OF_SERVICE_CD == 1 ~ "Pharmacy", PLACE_OF_SERVICE_CD ==      2 ~ "Telehealth", PLACE_OF_SERVICE_C| __truncated__ ...
  .. .. ..$ : language replace_with(out, query[[i]] & !replaced, value[[i]], NULL, error_call = error_call)
  .. .. ..$ : language .handleSimpleError(`<fn>`, "vector memory exhausted (limit reached?)",      base::quote(NULL))
  .. .. ..$ : language h(simpleError(msg, call))
  .. .. ..$ : language abort(bullets, class = "dplyr:::mutate_error", parent = skip_internal_condition(e),      bullets = bullets, call = error_call)
  .. ..$ parent     : int [1:18] 0 1 2 3 4 0 0 0 8 9 ...
  .. ..$ visible    : logi [1:18] TRUE TRUE TRUE TRUE TRUE TRUE ...
  .. ..$ namespace  : chr [1:18] "base" "base" "base" "base" ...
  .. ..$ scope      : chr [1:18] "::" "::" "local" "local" ...
  .. ..$ error_frame: logi [1:18] FALSE FALSE FALSE FALSE FALSE FALSE ...
  .. ..- attr(*, "version")= int 2
  ..$ parent        :List of 2
  .. ..$ message: chr "vector memory exhausted (limit reached?)"
  .. ..$ call   : NULL
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
  ..$ bullets       : chr "Problem while computing `pos = eval(e)`."
  ..$ call          : language mutate(., pos = eval(e))
  ..$ use_cli_format: logi TRUE
  ..- attr(*, "class")= chr [1:4] "dplyr:::mutate_error" "rlang_error" "error" "condition"
> 
> # All left joins are viable in this case (limited iterations for memory
> # concerns)
> 
> calls <- alist(
+   base = merge(psps_2019_base, pos_df, all.x = TRUE, all.y = FALSE, by.x = "PLACE_OF_SERVICE_CD", by.y = "code"),
+   tidy = left_join(psps_2019_tidy, pos_tbl, by = c("PLACE_OF_SERVICE_CD" = "code")),
+   dt   = merge(psps_2019_dt, pos_dt, all.x = TRUE, all.y = FALSE, by.x = "PLACE_OF_SERVICE_CD", by.y = "code"),
+                )
> 
> benchmark(calls, times = 3L)
Error in benchmark(calls, times = 3L) : 
  sapply(x, typeof) == "language" are not all TRUE
Calls: benchmark -> stopifnot
Execution halted
