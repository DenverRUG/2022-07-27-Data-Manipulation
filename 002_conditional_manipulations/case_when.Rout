
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("utilities.R")
> 
> # read in the data
> psps_2019_base <- read.csv(psps_2019_path, colClasses = psps_column_classes)
> psps_2019_tidy <- read_csv(psps_2019_path, col_type = psps_column_classes)
> psps_2019_dt   <- fread(psps_2019_path,    colClasses = psps_column_classes)
> 
> # read in all the place of services
> pos_df <- read.csv("000_data_sets/cms_place_of_service.cvs"
+                    , col.names = c("code", "name", "description")
+                    , colClasses = c("integer", "character", "character"))
> pos_tbl <- read_csv("000_data_sets/cms_place_of_service.cvs"
+                     , col_names = c("code", "name", "description")
+                     , col_types = list("integer", "character", "character"))
Warning message:
One or more parsing issues, see `problems()` for details 
> pos_dt  <- fread("000_data_sets/cms_place_of_service.cvs"
+                  , col.names = c("code", "name", "description")
+                  , colClasses = c("integer", "character", "character"))
> 
> str(pos_dt)
Classes ‘data.table’ and 'data.frame':	99 obs. of  3 variables:
 $ code       : int  1 2 3 4 5 6 7 8 9 10 ...
 $ name       : chr  "Pharmacy" "Telehealth" "School" "Homeless Shelter" ...
 $ description: chr  "A facility or location where drugs and other medically related items and services are sold, dispensed, or other"| __truncated__ "The location where health services and health related services are provided or received, through a telecommunic"| __truncated__ "A facility whose primary purpose is education. (Effective January 1, 2003)" "" ...
 - attr(*, ".internal.selfref")=<externalptr> 
> 
> ################################################################################
> # set key for the data.table
> 
> data.table::setkey(pos_dt, "code")
> data.table::setkey(psps_2019_dt, "PLACE_OF_SERVICE_CD")
> 
> ################################################################################
> # I want the example here to include a nested ifelse statement.  However, I do
> # not want to write it explicitly because it is just too long.  So, here is some
> # R code to generate the needed R code.  This code is evaluated and then copied
> # into the examples below.
> 
> # start with the last entry in the mapping data.frame
> i <- nrow(pos_df)
> nested_ifelse <-
+   substitute(ifelse(PLACE_OF_SERVICE_CD == code, nm, x),
+              list(code = pos_df$code[i], nm = pos_df$name[i], x = NA_character_)
+              )
> 
> # build the rest of the nested_ifelse
> for(i in rev(seq.int(nrow(pos_df) - 1L))) {
+   nested_ifelse <-
+     substitute(ifelse(PLACE_OF_SERVICE_CD == code, nm, x),
+                list(code = pos_df$code[i], nm = pos_df$name[i], x = nested_ifelse))
+ }
> 
> # transition what happens when we try to evaluate this?
> psps_2019_base[1:6, "PLACE_OF_SERVICE_CD"]
[1] 22 12 24 24 11 31
> with(psps_2019_base[1:6, ], eval(nested_ifelse))
[1] "On Campus-Outpatient Hospital" "Home"                         
[3] "Ambulatory Surgical Center"    "Ambulatory Surgical Center"   
[5] "Office"                        "Skilled Nursing Facility"     
> tryCatch(with(psps_2019_base, eval(nested_ifelse)), error = function(e) {e})
<simpleError: vector memory exhausted (limit reached?)>
> 
> # what about case_when in dplyr
> e <- paste("case_when(",
+            paste(paste0("PLACE_OF_SERVICE_CD == ", pos_df$code, " ~ '", pos_df$name, "'"), collapse = ", ")
+            , ")")
> e <- parse(text = e)
> 
> x <- try(psps_2019_tidy %>% mutate(pos = eval(e)), silent = TRUE)
> str(x)
 'try-error' chr "Error in mutate(., pos = eval(e)) : \n  Problem while computing `pos = eval(e)`.\nCaused by error:\n! vector me"| __truncated__
 - attr(*, "condition")=List of 6
  ..$ message       : chr "Problem while computing `pos = eval(e)`."
  ..$ trace         :Classes ‘rlang_trace’, ‘rlib_trace’, ‘tbl’ and 'data.frame':	18 obs. of  6 variables:
  .. ..$ call       :List of 18
  .. .. ..$ : language try(psps_2019_tidy %>% mutate(pos = eval(e)), silent = TRUE)
  .. .. ..$ : language tryCatch(expr, error = function(e) {     call <- conditionCall(e) ...
  .. .. ..$ : language tryCatchList(expr, classes, parentenv, handlers)
  .. .. ..$ : language tryCatchOne(expr, names, parentenv, handlers[[1L]])
  .. .. ..$ : language doTryCatch(return(expr), name, parentenv, handler)
  .. .. ..$ : language psps_2019_tidy %>% mutate(pos = eval(e))
  .. .. ..$ : language mutate(., pos = eval(e))
  .. .. ..$ : language mutate.data.frame(., pos = eval(e))
  .. .. ..$ : language mutate_cols(.data, dplyr_quosures(...), caller_env = caller_env())
  .. .. ..$ : language withCallingHandlers({     for (i in seq_along(dots)) { ...
  .. .. ..$ : language mask$eval_all_mutate(quo)
  .. .. ..$ : language eval(e)
  .. .. ..$ : language eval(e)
  .. .. ..$ : language case_when(PLACE_OF_SERVICE_CD == 1 ~ "Pharmacy", PLACE_OF_SERVICE_CD ==      2 ~ "Telehealth", PLACE_OF_SERVICE_C| __truncated__ ...
  .. .. ..$ : language replace_with(out, query[[i]] & !replaced, value[[i]], NULL, error_call = error_call)
  .. .. ..$ : language .handleSimpleError(`<fn>`, "vector memory exhausted (limit reached?)",      base::quote(NULL))
  .. .. ..$ : language h(simpleError(msg, call))
  .. .. ..$ : language abort(bullets, class = "dplyr:::mutate_error", parent = skip_internal_condition(e),      bullets = bullets, call = error_call)
  .. ..$ parent     : int [1:18] 0 1 2 3 4 0 0 0 8 9 ...
  .. ..$ visible    : logi [1:18] TRUE TRUE TRUE TRUE TRUE TRUE ...
  .. ..$ namespace  : chr [1:18] "base" "base" "base" "base" ...
  .. ..$ scope      : chr [1:18] "::" "::" "local" "local" ...
  .. ..$ error_frame: logi [1:18] FALSE FALSE FALSE FALSE FALSE FALSE ...
  .. ..- attr(*, "version")= int 2
  ..$ parent        :List of 2
  .. ..$ message: chr "vector memory exhausted (limit reached?)"
  .. ..$ call   : NULL
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
  ..$ bullets       : chr "Problem while computing `pos = eval(e)`."
  ..$ call          : language mutate(., pos = eval(e))
  ..$ use_cli_format: logi TRUE
  ..- attr(*, "class")= chr [1:4] "dplyr:::mutate_error" "rlang_error" "error" "condition"
> 
> # All left joins are viable in this case (limited iterations for memory
> # concerns)
> 
> calls <- alist(
+     base = merge(psps_2019_base, pos_df, all.x = TRUE, all.y = FALSE, by.x = "PLACE_OF_SERVICE_CD", by.y = "code")
+   , tidy = left_join(psps_2019_tidy, pos_tbl, by = c("PLACE_OF_SERVICE_CD" = "code"))
+   , dt   = merge(psps_2019_dt, pos_dt, all.x = TRUE, all.y = FALSE, by.x = "PLACE_OF_SERVICE_CD", by.y = "code")
+                )
> 
> benchmark(calls, times = 3L)
$benchmark
Unit: seconds
 expr       min        lq      mean    median        uq       max neval
 base 44.435402 44.930711 45.633389 45.426020 46.232382 47.038744     3
 tidy  2.842919  3.697732  5.713768  4.552544  7.149192  9.745841     3
   dt  2.618981  2.747998  3.319297  2.877016  3.669456  4.461895     3

$profmem
             bytes
base 7,501,664,208
tidy 2,721,621,808
dt   2,324,810,928

> 
> ################################################################################
> # Working nested examples....
> #
> # These might be a lot better when a join isn't a viable alternative option.
> # That said, I think with some planning a good link table can be built.  The
> # case_when, or nested ifelse is better for when a preference is wanted for
> # similar, or when a link table isn't an option.
> 
> # use the diamonds data set for the example, set up three (deep) copies for
> # different paradigms
> data(diamonds, package = "ggplot2")
> diamonds_df <- data.frame(diamonds)
> diamonds_dt <- setDT(copy(diamonds_df))
> 
> # build price categories:
> # [0, 1000)
> # [1000, 2500)
> # [2500, 5000)
> # [5000, 10000)
> # [10000, 15000)
> # [15000, Inf)
> 
> calls <- alist(
+   base_ifelse = 
+     with(diamonds_df,
+          ifelse(price < 1000, "[$0, $1,000)",
+            ifelse(price < 2500, "[$1,000, $2,500)",
+              ifelse(price < 5000, "[$2,500, $5,000)",
+                ifelse(price < 10000, "[$5,000, $10,000)",
+                  ifelse(price < 15000, "[$10,000, $15,000)", "Over $15,000")))))
+          )
+   ,
+   tidy_if_else =
+     with(diamonds,
+          if_else(price < 1000, "[$0, $1,000)",
+            if_else(price < 2500, "[$1,000, $2,500)",
+              if_else(price < 5000, "[$2,500, $5,000)",
+                if_else(price < 10000, "[$5,000, $10,000)",
+                  if_else(price < 15000, "[$10,000, $15,000)", "Over $15,000")))))
+          )
+   ,
+   tidy_case_when =
+     with(diamonds,
+          case_when(price < 1000 ~ "[$0, $1,000)",
+                    price < 2500 ~ "[$1,000, $2,500)",
+                    price < 5000 ~ "[$2,500, $5,000)",
+                    price < 10000 ~ "[$5,000, $10,000)",
+                    price < 15000 ~ "[$10,000, $15,000)",
+                    TRUE ~ "Over $15,000")
+          )
+   ,
+   dt_fifelse =
+     with(diamonds_dt,
+          fifelse(price < 1000, "[$0, $1,000)",
+            fifelse(price < 2500, "[$1,000, $2,500)",
+              fifelse(price < 5000, "[$2,500, $5,000)",
+                fifelse(price < 10000, "[$5,000, $10,000)",
+                  fifelse(price < 15000, "[$10,000, $15,000)", "Over $15,000")))))
+          )
+   ,
+   dt_fcase =
+     with(diamonds_dt,
+          fcase(price < 1000, "[$0, $1,000)",
+                price < 2500, "[$1,000, $2,500)",
+                price < 5000, "[$2,500, $5,000)",
+                price < 10000, "[$5,000, $10,000)",
+                price < 15000, "[$10,000, $15,000)",
+                default = "Over $15,000")
+          )
+   ,
+   base_cut =
+     cut(diamonds_df$price
+         , breaks = c(0, 1000, 2500, 5000, 10000, 15000, Inf)
+         , right = FALSE
+         , labels = c("[$0, $1,000)",
+                      "[$1,000, $2,500)",
+                      "[$2,500, $5,000)",
+                      "[$5,000, $10,000)",
+                      "[$10,000, $15,000)",
+                      "Over $15,000")
+     )
+ )
> 
> 
> with(calls, identical(as.character(eval(base_cut)), eval(base_ifelse)))
[1] TRUE
> with(calls, identical(as.character(eval(base_cut)), eval(tidy_if_else)))
[1] TRUE
> with(calls, identical(as.character(eval(base_cut)), eval(tidy_case_when)))
[1] TRUE
> with(calls, identical(as.character(eval(base_cut)), eval(dt_fifelse)))
[1] TRUE
> with(calls, identical(as.character(eval(base_cut)), eval(dt_fcase)))
[1] TRUE
> 
> benchmark(calls, times = 25)
$benchmark
Unit: milliseconds
           expr       min        lq      mean    median        uq       max
    base_ifelse 33.014977 33.814291 34.547075 34.099298 35.234670 38.477716
   tidy_if_else 13.468643 13.756618 14.283249 14.057310 14.635841 15.853541
 tidy_case_when  8.708877  9.121305  9.488973  9.398186  9.620283 11.371030
     dt_fifelse  2.629722  2.745479  2.953053  2.894065  3.040514  3.557473
       dt_fcase  1.369575  1.404056  1.524144  1.524642  1.597587  1.851866
       base_cut  2.582604  2.650774  2.785755  2.690760  2.818522  3.909550
 neval
    25
    25
    25
    25
    25
    25

$profmem
                    bytes
base_ifelse    15,106,184
tidy_if_else   19,157,496
tidy_case_when 15,754,000
dt_fifelse      3,236,880
dt_fcase        1,726,416
base_cut        1,942,128

> 
> # Another Example
> # example of case_when in tidyverse
> diamonds %>%
+   mutate(buy_it =
+          case_when(
+                    clarity == "IF" ~ "Yes, it's flawless",
+                    color %in% c("D", "E", "F") ~ "Yeah, it's colorless",
+                    clarity == "IF" & color %in% c("G", "H", "I", "J") ~ "Sure, it's flawless, but only nearly colorless",
+                    color %in% c("S", "T", "U", "V", "X", "Y", "Z") ~ "No, light yellow color",
+                    clarity %in% c("VVS1", "VVS2") ~ "Yeah, nearly perfect",
+                    clarity %in% c("VS1", "VS2") ~ "Yeah, you can't see any imprefection without 10k magnification",
+                    clarity %in% c("SI1", "SI2") ~ "Maybe, take a good look",
+                    clarity %in% c("I1", "I2", "I3") ~ "You are going to see the flaws.",
+                    TRUE ~ "maybe?" # default
+                    )
+          ) %>%
+   group_by(buy_it) %>%
+   summarize(n())
# A tibble: 6 × 2
  buy_it                                                         `n()`
  <chr>                                                          <int>
1 Maybe, take a good look                                        10927
2 Yeah, it's colorless                                           25498
3 Yeah, nearly perfect                                            4560
4 Yeah, you can't see any imprefection without 10k magnification 10711
5 Yes, it's flawless                                              1790
6 You are going to see the flaws.                                  454
> 
> # Where are the "Sure, it's flawless, but only nearly colorless"? diamonds?
> diamonds %>%
+   dplyr::filter(clarity == "IF") %>%
+   dplyr::group_by(clarity, color) %>%
+   dplyr::summarize(n())
`summarise()` has grouped output by 'clarity'. You can override using the
`.groups` argument.
# A tibble: 7 × 3
# Groups:   clarity [1]
  clarity color `n()`
  <ord>   <ord> <int>
1 IF      D        73
2 IF      E       158
3 IF      F       385
4 IF      G       681
5 IF      H       299
6 IF      I       143
7 IF      J        51
> 
> # similar code with nest ifelse
> calls <- alist(
+   base_nested_ifelse = 
+     with(diamonds_df,
+          ifelse(clarity == "IF", "Yes, it's flawless",
+                 ifelse(color %in% c("D", "E", "F"), "Yeah, it's colorless",
+                        ifelse(clarity == "IF" & color %in% c("G", "H", "I", "J"), "Sure, it's flawless, but only nearly colorless",
+                               ifelse(color %in% c("S", "T", "U", "V", "X", "Y", "Z"), "No, light yellow color",
+                                      ifelse(clarity %in% c("VVS1", "VVS2"), "Yeah, nearly perfect",
+                                             ifelse(clarity %in% c("VS1", "VS2"), "Yeah, you can't see any imprefection without 10k magnification",
+                                                    ifelse(clarity %in% c("SI1", "SI2"), "Maybe, take a good look",
+                                                           ifelse(clarity %in% c("I1", "I2", "I3") , "You are going to see the flaws.", "maybe?"))))))))
+          )
+   ,
+   tidy_nested_ifelse =
+     with(diamonds,
+          ifelse(clarity == "IF", "Yes, it's flawless",
+                 ifelse(color %in% c("D", "E", "F"), "Yeah, it's colorless",
+                        ifelse(clarity == "IF" & color %in% c("G", "H", "I", "J"), "Sure, it's flawless, but only nearly colorless",
+                               ifelse(color %in% c("S", "T", "U", "V", "X", "Y", "Z"), "No, light yellow color",
+                                      ifelse(clarity %in% c("VVS1", "VVS2"), "Yeah, nearly perfect",
+                                             ifelse(clarity %in% c("VS1", "VS2"), "Yeah, you can't see any imprefection without 10k magnification",
+                                                    ifelse(clarity %in% c("SI1", "SI2"), "Maybe, take a good look",
+                                                           ifelse(clarity %in% c("I1", "I2", "I3") , "You are going to see the flaws.", "maybe?"))))))))
+          )
+   ,
+   tidy_nested_if_else =
+     with(diamonds,
+          if_else(clarity == "IF", "Yes, it's flawless",
+                 if_else(color %in% c("D", "E", "F"), "Yeah, it's colorless",
+                        if_else(clarity == "IF" & color %in% c("G", "H", "I", "J"), "Sure, it's flawless, but only nearly colorless",
+                               if_else(color %in% c("S", "T", "U", "V", "X", "Y", "Z"), "No, light yellow color",
+                                      if_else(clarity %in% c("VVS1", "VVS2"), "Yeah, nearly perfect",
+                                             if_else(clarity %in% c("VS1", "VS2"), "Yeah, you can't see any imprefection without 10k magnification",
+                                                    if_else(clarity %in% c("SI1", "SI2"), "Maybe, take a good look",
+                                                           if_else(clarity %in% c("I1", "I2", "I3") , "You are going to see the flaws.", "maybe?"))))))))
+          )
+   ,
+   tidy_case_when =
+     diamonds %>%
+       mutate(buy_it =
+              case_when(
+                        clarity == "IF" ~ "Yes, it's flawless",
+                        color %in% c("D", "E", "F") ~ "Yeah, it's colorless",
+                        clarity == "IF" & color %in% c("G", "H", "I", "J") ~ "Sure, it's flawless, but only nearly colorless",
+                        color %in% c("S", "T", "U", "V", "X", "Y", "Z") ~ "No, light yellow color",
+                        clarity %in% c("VVS1", "VVS2") ~ "Yeah, nearly perfect",
+                        clarity %in% c("VS1", "VS2") ~ "Yeah, you can't see any imprefection without 10k magnification",
+                        clarity %in% c("SI1", "SI2") ~ "Maybe, take a good look",
+                        clarity %in% c("I1", "I2", "I3") ~ "You are going to see the flaws.",
+                        TRUE ~ "maybe?" # default
+                        )
+              )
+   ,
+   dt_nested_ifelse =
+     with(diamonds_dt,
+          ifelse(clarity == "IF", "Yes, it's flawless",
+                 ifelse(color %in% c("D", "E", "F"), "Yeah, it's colorless",
+                        ifelse(clarity == "IF" & color %in% c("G", "H", "I", "J"), "Sure, it's flawless, but only nearly colorless",
+                               ifelse(color %in% c("S", "T", "U", "V", "X", "Y", "Z"), "No, light yellow color",
+                                      ifelse(clarity %in% c("VVS1", "VVS2"), "Yeah, nearly perfect",
+                                             ifelse(clarity %in% c("VS1", "VS2"), "Yeah, you can't see any imprefection without 10k magnification",
+                                                    ifelse(clarity %in% c("SI1", "SI2"), "Maybe, take a good look",
+                                                           ifelse(clarity %in% c("I1", "I2", "I3") , "You are going to see the flaws.", "maybe?"))))))))
+          )
+   ,
+   dt_nested_fifelse =
+     with(diamonds_dt,
+          fifelse(clarity == "IF", "Yes, it's flawless",
+                 fifelse(color %in% c("D", "E", "F"), "Yeah, it's colorless",
+                        fifelse(clarity == "IF" & color %in% c("G", "H", "I", "J"), "Sure, it's flawless, but only nearly colorless",
+                               fifelse(color %in% c("S", "T", "U", "V", "X", "Y", "Z"), "No, light yellow color",
+                                      fifelse(clarity %in% c("VVS1", "VVS2"), "Yeah, nearly perfect",
+                                             fifelse(clarity %in% c("VS1", "VS2"), "Yeah, you can't see any imprefection without 10k magnification",
+                                                    fifelse(clarity %in% c("SI1", "SI2"), "Maybe, take a good look",
+                                                           fifelse(clarity %in% c("I1", "I2", "I3") , "You are going to see the flaws.", "maybe?"))))))))
+          )
+   ,
+   dt_fcase =
+     with(diamonds_dt,
+              fcase(
+                        clarity == "IF"                                     , "Yes, it's flawless",
+                        color %in% c("D", "E", "F")                         , "Yeah, it's colorless",
+                        clarity == "IF" & color %in% c("G", "H", "I", "J")  , "Sure, it's flawless, but only nearly colorless",
+                        color %in% c("S", "T", "U", "V", "X", "Y", "Z")     , "No, light yellow color",
+                        clarity %in% c("VVS1", "VVS2")                      , "Yeah, nearly perfect",
+                        clarity %in% c("VS1", "VS2")                        , "Yeah, you can't see any imprefection without 10k magnification",
+                        clarity %in% c("SI1", "SI2")                        , "Maybe, take a good look",
+                        clarity %in% c("I1", "I2", "I3")                    , "You are going to see the flaws.",
+                        default =  "maybe?"
+                        )
+              )
+ )
> 
> 
> benchmark(calls, times = 50)
$benchmark
Unit: milliseconds
                expr      min       lq     mean   median       uq       max
  base_nested_ifelse 64.63115 66.98390 72.20155 72.27103 74.33139 106.68624
  tidy_nested_ifelse 64.16375 66.54494 70.46164 69.53110 72.71522 109.00651
 tidy_nested_if_else 34.45725 36.13462 40.93706 38.09451 44.89937  77.97251
      tidy_case_when 25.95778 27.16321 31.32886 30.64262 34.46784  50.73430
    dt_nested_ifelse 64.54076 66.19151 69.27178 67.36574 72.46338  81.28943
   dt_nested_fifelse 14.30417 14.62946 16.50181 15.27035 17.55549  29.27929
            dt_fcase 11.56976 12.26359 13.63939 13.37668 14.52368  20.26494
 neval
    50
    50
    50
    50
    50
    50
    50

$profmem
                         bytes
base_nested_ifelse  28,701,472
tidy_nested_ifelse  28,701,472
tidy_nested_if_else 37,231,088
tidy_case_when      27,196,632
dt_nested_ifelse    28,701,472
dt_nested_fifelse   10,142,256
dt_fcase             7,337,272

> 
> ################################################################################
> 
> sessionInfo()
R version 4.2.1 (2022-06-23)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur ... 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] data.table_1.14.3 forcats_0.5.1     stringr_1.4.0     dplyr_1.0.9      
 [5] purrr_0.3.4       readr_2.1.2       tidyr_1.2.0       tibble_3.1.8     
 [9] ggplot2_3.3.6     tidyverse_1.3.2  

loaded via a namespace (and not attached):
 [1] pillar_1.8.0         compiler_4.2.1       cellranger_1.1.0    
 [4] dbplyr_2.2.1         tools_4.2.1          bit_4.0.4           
 [7] lubridate_1.8.0      googledrive_2.0.0    jsonlite_1.8.0      
[10] lifecycle_1.0.1      gargle_1.2.0         gtable_0.3.0        
[13] pkgconfig_2.0.3      rlang_1.0.4          reprex_2.0.1        
[16] DBI_1.1.3            cli_3.3.0            microbenchmark_1.4.9
[19] parallel_4.2.1       haven_2.5.0          xml2_1.3.3          
[22] withr_2.5.0          httr_1.4.3           generics_0.1.3      
[25] vctrs_0.4.1          fs_1.5.2             hms_1.1.1           
[28] bit64_4.0.5          googlesheets4_1.0.0  grid_4.2.1          
[31] tidyselect_1.1.2     glue_1.6.2           R6_2.5.1            
[34] fansi_1.0.3          readxl_1.4.0         profmem_0.6.0       
[37] vroom_1.5.7          tzdb_0.3.0           modelr_0.1.8        
[40] magrittr_2.0.3       backports_1.4.1      scales_1.2.0        
[43] ellipsis_0.3.2       rvest_1.0.2          assertthat_0.2.1    
[46] colorspace_2.0-3     utf8_1.2.2           stringi_1.7.8       
[49] munsell_0.5.0        broom_1.0.0          crayon_1.5.1        
> 
> 
> proc.time()
   user  system elapsed 
365.845  98.447 423.123 
