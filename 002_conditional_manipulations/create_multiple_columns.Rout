
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # multiple conditions for data manipulation
> source('utilities.R')
> 
> # read in the data
> psps_2019_df <- read.csv(psps_2019_path, colClasses = psps_column_classes)
> psps_2019_tidy <- read_csv(psps_2019_path, col_types = psps_column_classes)
> psps_2019_dt   <- fread(psps_2019_path,    colClasses = psps_column_classes)
> 
> ################################################################################
> # Create an indicator column for place of service being a hospitial
> #    Place of Service Code                        Place of Service Name
> #                      19               Off Campus-Outpatient Hospital
> #                      21                           Inpatient Hospital
> #                      22                On Campus-Outpatient Hospital
> #
> # Build a column with a flag for hospital/non-hospital
> # Build a column with NA for non-hospital, 1 for inpatient, 0 for outpatient
> #
> # *** will use explicit column constructions and merges ***
> #
> 
> ################################################################################
> # Build a "link table" to map from the codes to the needed flags.  One option is
> # to use just three rows but you'll have to deal with NA values after a merge
> # option one
> map <- data.frame(code      = c(19, 21, 22),
+                   hospital  = c(1L, 1L, 1L),
+                   inpatient = c(0L, 1L, 0L))
> 
> # Another map that could be built to cover all the codes in the data set:
> map_df  <- data.frame(code = unique(psps_2019_df$PLACE_OF_SERVICE_CD))
> map_tbl <- tibble(code     = unique(psps_2019_df$PLACE_OF_SERVICE_CD))
> map_dt  <- data.table(code = unique(psps_2019_df$PLACE_OF_SERVICE_CD))
> 
> map_df$hospital  <- as.integer(map_df$code %in% c(19, 21, 22))
> map_tbl$hospital <- as.integer(map_tbl$code %in% c(19, 21, 22))
> map_dt$hospital  <- as.integer(map_dt$code %in% c(19, 21, 22))
> 
> map_df$inpatient <- NA_integer_
> map_df[map_df$code %in% c(19, 22), "inpatient"] <- 0L
> map_df[map_df$code %in% c(21),     "inpatient"] <- 1L
> 
> map_tbl$inpatient <- NA_integer_
> map_tbl[map_tbl$code %in% c(19, 22), "inpatient"] <- 0L
> map_tbl[map_tbl$code %in% c(21),     "inpatient"] <- 1L
> 
> map_dt$inpatient <- NA_integer_
> map_dt[map_dt$code %in% c(19, 22), "inpatient"] <- 0L
> map_dt[map_dt$code %in% c(21),     "inpatient"] <- 1L
> 
> data.table::setkey(map_dt, "code")
> data.table::setkey(psps_2019_dt, "PLACE_OF_SERVICE_CD")
> 
> ################################################################################
> calls <- alist(
+   base_v1 = {
+     psps_2019_df$hospital <- as.integer(psps_2019_df$PLACE_OF_SERVICE_CD %in% c(19, 21, 22))
+ 
+     psps_2019_df$inpatient <- NA_integer_
+     psps_2019_df$inpatient[psps_2019_df$hospital == 1L] <-
+       as.integer(psps_2019_df$PLACE_OF_SERVICE_CD[psps_2019_df$hospital == 1L] == 19)
+   }
+   ,
+   base_v2 = {
+     psps_2019_df$hospital <- as.integer(psps_2019_df$PLACE_OF_SERVICE_CD %in% c(19, 21, 22))
+     psps_2019_df$inpatient <-
+       ifelse(psps_2019_df$hospital == 0L, NA_integer_, as.integer(psps_2019_df$PLACE_OF_SERVICE_CD == 19))
+   }
+   ,
+   base_merge = {
+     # A left merge
+     base::merge(
+                   x = psps_2019_df
+                 , y = map_df
+                 , all.x = TRUE
+                 , all.y = FALSE
+                 , by.x  = "PLACE_OF_SERVICE_CD"
+                 , by.y = "code"
+                 )
+   }
+   ,
+   tidy_v1 = {
+     psps_2019_tidy %>%
+       mutate(hospital = as.integer(.data$PLACE_OF_SERVICE_CD %in% c(19, 21, 22)),
+              inpatient = NA_integer_,
+              inpatient = as.integer(.data$hospital == 1 & .data$PLACE_OF_SERVICE_CD == 19)
+              )
+   }
+   ,
+   tidy_v2 = {
+     psps_2019_tidy %>%
+       mutate(hospital = as.integer(.data$PLACE_OF_SERVICE_CD %in% c(19, 21, 22)),
+              inpatient = if_else(.data$hospital == 0L, NA_integer_, as.integer(.data$PLACE_OF_SERVICE_CD == 19))
+              )
+   }
+   ,
+   tidy_merge = {
+     dplyr::left_join(
+                        x = psps_2019_tidy
+                      , y = map_tbl
+                      , by = c("PLACE_OF_SERVICE_CD" = "code")
+     )
+   }
+   ,
+   dt_v1 = {
+     psps_2019_dt[, `:=`(hospital = as.integer(PLACE_OF_SERVICE_CD %in% c(19, 21, 22)), inpatient = NA_integer_)]
+     psps_2019_dt[PLACE_OF_SERVICE_CD == 19, inpatient := 1L]
+   }
+   ,
+   dt_v2 = {
+     psps_2019_dt[, hospital := as.integer(PLACE_OF_SERVICE_CD %in% c(19, 21, 22))]
+     psps_2019_dt[, inpatient := fifelse(hospital == 0L, NA_integer_, as.integer(PLACE_OF_SERVICE_CD == 19))]
+   }
+   ,
+   dt_merge = {
+     # S3 method for data.table
+     # data.table:::merge.data.table
+     merge(
+             x = psps_2019_dt
+           , y = map_dt
+           , by.x = "PLACE_OF_SERVICE_CD"
+           , by.y = "code"
+           , all.x = TRUE
+           , all.y = FALSE
+     )
+   }
+ )
> 
> 
> benchmark(calls, times = 10)
$benchmark
Unit: milliseconds
       expr        min         lq       mean     median         uq        max
    base_v1   674.0334   708.2519   868.0630   823.0311  1010.7485  1145.8795
    base_v2   731.0336   883.5633  2638.7053  1172.7928  1333.8206  9963.1316
 base_merge 35481.9943 40062.7547 44183.1004 44405.5030 48284.5958 53368.6782
    tidy_v1   631.1510   679.8594  1174.7077   779.9352  1024.1306  3531.2582
    tidy_v2  1092.5182  1451.7424  3347.4963  1675.8458  4241.4588 12828.2879
 tidy_merge  2103.3943  3481.9807  5000.8031  4598.8092  6336.4925 10443.3013
      dt_v1   206.6376   272.6946   380.3589   312.4955   488.1235   644.4321
      dt_v2   267.3446   390.8815   599.6015   526.5835   690.0203  1271.5839
   dt_merge  1439.9493  4042.7529  4146.8348  4288.9024  4908.9277  5822.6242
 neval
    10
    10
    10
    10
    10
    10
    10
    10
    10

$profmem
                   bytes
base_v1      743,227,280
base_v2    1,020,599,592
base_merge 7,104,762,320
tidy_v1      737,113,952
tidy_v2    1,295,221,632
tidy_merge 2,438,117,584
dt_v1        344,026,568
dt_v2        567,068,536
dt_merge   2,324,814,320

> 
> sessionInfo()
R version 4.2.1 (2022-06-23)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur ... 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] data.table_1.14.3 forcats_0.5.1     stringr_1.4.0     dplyr_1.0.9      
 [5] purrr_0.3.4       readr_2.1.2       tidyr_1.2.0       tibble_3.1.8     
 [9] ggplot2_3.3.6     tidyverse_1.3.2  

loaded via a namespace (and not attached):
 [1] pillar_1.8.0         compiler_4.2.1       cellranger_1.1.0    
 [4] dbplyr_2.2.1         tools_4.2.1          bit_4.0.4           
 [7] lubridate_1.8.0      googledrive_2.0.0    jsonlite_1.8.0      
[10] lifecycle_1.0.1      gargle_1.2.0         gtable_0.3.0        
[13] pkgconfig_2.0.3      rlang_1.0.4          reprex_2.0.1        
[16] DBI_1.1.3            cli_3.3.0            microbenchmark_1.4.9
[19] parallel_4.2.1       haven_2.5.0          xml2_1.3.3          
[22] withr_2.5.0          httr_1.4.3           generics_0.1.3      
[25] vctrs_0.4.1          fs_1.5.2             hms_1.1.1           
[28] bit64_4.0.5          googlesheets4_1.0.0  grid_4.2.1          
[31] tidyselect_1.1.2     glue_1.6.2           R6_2.5.1            
[34] fansi_1.0.3          readxl_1.4.0         profmem_0.6.0       
[37] vroom_1.5.7          tzdb_0.3.0           modelr_0.1.8        
[40] magrittr_2.0.3       backports_1.4.1      scales_1.2.0        
[43] ellipsis_0.3.2       rvest_1.0.2          assertthat_0.2.1    
[46] colorspace_2.0-3     utf8_1.2.2           stringi_1.7.8       
[49] munsell_0.5.0        broom_1.0.0          crayon_1.5.1        
> 
> 
> proc.time()
   user  system elapsed 
581.786 219.503 758.482 
